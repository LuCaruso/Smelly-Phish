import os
from datetime import datetime
from dotenv import load_dotenv
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import plotly.graph_objects as go

from Tools.KnownSitesCheck import (
    extract_domain as extract_known_domain,
    _check_openphish,
    _check_phishtank,
    _check_google_safe_browsing,
)
from Tools.BasicHeuristicsCheck import analyze_heuristics
from Tools.AdvancedHeuristicsCheck import analyze_advanced_heuristics


# Carrega vari√°veis de ambiente
load_dotenv()

# Inicializa hist√≥rico
if 'history' not in st.session_state:
    st.session_state.history = []

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="Detec√ß√£o de Phishing", layout="centered", page_icon="üõ°Ô∏è")

# CSS personalizado
st.markdown("""
<style>
.module-block { padding: 1rem; border-radius: 0.5rem; margin-bottom: 1rem; }
.metric-block {
    display: inline-block;
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
    margin: 0.2rem;
    color: white;
    font-weight: bold;
    cursor: help;
}
.metric-true { background-color: #e74c3c; }
.metric-false { background-color: #27ae60; }
</style>
""", unsafe_allow_html=True)


# Fun√ß√£o para criar sub-blocos
def metric_block(label, is_risk, tooltip):
    color_class = 'metric-true' if is_risk else 'metric-false'
    return f"<div class='metric-block {color_class}' title='{tooltip}'>{label}</div>"


st.title("Smelly Phish ‚Äì Detector de Phishing")
url = st.text_input("Digite uma URL para verificar")


if st.button("Verificar") and url:
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # 1) Verifica√ß√£o em Bases Conhecidas
    domain = extract_known_domain(url)
    op_flag = _check_openphish(domain)
    pt_flag = _check_phishtank(domain)
    gsb_flag = _check_google_safe_browsing(url)
    found_known = op_flag or pt_flag or gsb_flag
    color = "#f8d7da" if found_known else "#d4edda"
    text_color = "#721c24" if found_known else "#155724"
    st.markdown(
        f"<div class='module-block' style='background-color:{color}; color:{text_color};'>"
        f"<strong>Verifica√ß√£o em Bases Conhecidas:</strong><br>"
        +
        "".join([
            metric_block("OpenPhish", op_flag, "OpenPhish √© uma base de dados que mant√©m uma lista atualizada de URLs confirmadas como phishing. Se a URL aparecer aqui, ela j√° foi identificada como uma amea√ßa real por especialistas na √°rea."),
            metric_block("PhishTank", pt_flag, "PhishTank √© um servi√ßo colaborativo onde usu√°rios e analistas reportam e validam URLs maliciosas. Se a URL estiver nesta base, √© um forte indicativo de que o site j√° foi utilizado em ataques."),
            metric_block("Google Safe Browsing", gsb_flag, "O Google Safe Browsing detecta sites que hospedam malware, phishing e outras amea√ßas. Se o site consta como inseguro, ele representa um risco significativo para os usu√°rios.")
        ]) +
        "</div>",
        unsafe_allow_html=True
    )

    # 2) An√°lise Heur√≠stica B√°sica
    h = analyze_heuristics(url)
    color = "#f8d7da" if h["suspicious"] else "#d4edda"
    text_color = "#721c24" if h["suspicious"] else "#155724"
    st.markdown(
        f"<div class='module-block' style='background-color:{color}; color:{text_color};'>"
        f"<strong>An√°lise Heur√≠stica B√°sica:</strong><br>"
        +
        "".join([
            metric_block(f"Subdom√≠nios ({h['num_sub']})", h['num_sub'] > 2, "O uso excessivo de subdom√≠nios (ex.: login.payments.secure.bank.com) pode ser uma tentativa de enganar usu√°rios, criando uma apar√™ncia leg√≠tima atrav√©s de estruturas complexas no nome do dom√≠nio."),
            metric_block("N√∫meros no dom√≠nio", h['number_sub'], "N√∫meros s√£o frequentemente usados em dom√≠nios falsificados (ex.: facebook123.com) porque os atacantes n√£o conseguem registrar os dom√≠nios oficiais. Essa pr√°tica √© comum para evitar detec√ß√£o ou por falta de disponibilidade de nomes leg√≠timos."),
            metric_block(
                f"Caracteres especiais: {', '.join(h['specials']) if h['specials'] else 'Nenhum'}",
                bool(h['specials']),
                "Caracteres como h√≠fens, sublinhados ou at√© substitui√ß√µes visuais (ex.: 'pay-pal.com' ou 'secure_login.net') s√£o frequentemente utilizados por criminosos para criar dom√≠nios que imitam empresas leg√≠timas."
            )
        ]) +
        "</div>",
        unsafe_allow_html=True
    )

    # 3) An√°lise Heur√≠stica Avan√ßada
    t = analyze_advanced_heuristics(url)
    ssl = t['ssl']
    sim = t['similarity']
    found_adv = t['suspicious']
    color = "#f8d7da" if found_adv else "#d4edda"
    text_color = "#721c24" if found_adv else "#155724"
    st.markdown(
        f"<div class='module-block' style='background-color:{color}; color:{text_color};'>"
        f"<strong>An√°lise Heur√≠stica Avan√ßada:</strong><br>"
        +
        "".join([
            metric_block(f"Idade dom√≠nio ({t['domain_age_days']} dias)", t['domain_age_days'] is not None and t['domain_age_days'] < 30, "Dom√≠nios muito novos (menos de 30 dias) s√£o altamente suspeitos, pois campanhas de phishing costumam usar dom√≠nios rec√©m-registrados para evitar bloqueios e maximizar a efetividade antes que sejam denunciados."),
            metric_block("DNS Din√¢mico", t['dynamic_dns'], "O uso de servi√ßos de DNS din√¢mico permite que os criminosos mudem rapidamente o endere√ßo IP do servidor onde o site malicioso est√° hospedado. Isso dificulta a detec√ß√£o e o bloqueio por solu√ß√µes de seguran√ßa."),
            metric_block(f"SSL Emissor: {ssl['issuer'] or 'Desconhecido'}", ssl['issuer'] is None, "A aus√™ncia de um certificado SSL v√°lido ou emitido por uma autoridade reconhecida significa que a conex√£o com o site n√£o √© segura. Sites leg√≠timos sempre possuem SSL confi√°vel."),
            metric_block(f"SSL expira em: {ssl['expires']} ({ssl['days_left']} dias)", ssl['expired'], "Certificados SSL expirados indicam falta de manuten√ß√£o e podem ser um sinal de site abandonado ou malicioso."),
            metric_block("Cert Match", not ssl['match'], "O certificado SSL precisa estar vinculado exatamente ao dom√≠nio acessado. Quando n√£o h√° correspond√™ncia, isso indica uma tentativa de mascaramento ou um erro proposital para enganar usu√°rios."),
            metric_block(f"Redirecionamentos: {'Sim' if t['redirect'] else 'N√£o'}", t['redirect'], "Muitos ataques de phishing utilizam redirecionamentos para disfar√ßar a origem do site, levar o usu√°rio a um dom√≠nio malicioso ap√≥s passar por dom√≠nios aparentemente leg√≠timos."),
            metric_block(f"Similaridade com {sim['brand']} ({sim['ratio']:.2f})", sim['ratio'] > 0.8, "Se a URL, o conte√∫do ou o dom√≠nio tem alta similaridade textual ou visual com uma marca conhecida, √© prov√°vel que o objetivo seja se passar por essa empresa e enganar os visitantes."),
            metric_block("Formul√°rio de login", t['content_issues']['login_form'], "Phishing geralmente envolve a captura de credenciais. Se o site cont√©m um formul√°rio de login, especialmente em p√°ginas n√£o esperadas, √© um forte indicativo de que tenta roubar informa√ß√µes de acesso."),
            metric_block("Solicita√ß√£o sens√≠vel", t['content_issues']['sensitive_request'], "Se o site solicita informa√ß√µes sens√≠veis (como CPF, senhas, dados banc√°rios) de forma inesperada, especialmente sem protocolos de seguran√ßa adequados, isso representa risco elevado de fraude.")
        ]) +
        "</div>",
        unsafe_allow_html=True
    )

    # Atualiza hist√≥rico
    st.session_state.history = [e for e in st.session_state.history if e['URL'] != url]
    st.session_state.history.append({
        'Timestamp': timestamp,
        'URL': url,
        'OpenPhish': op_flag,
        'PhishTank': pt_flag,
        'Google Safe Browsing': gsb_flag,
        'Suspeita B√°sica': h['suspicious'],
        'Subdom√≠nios': h['num_sub'],
        'N√∫meros no dom√≠nio': h['number_sub'],
        'Caracteres especiais': ','.join(h['specials']),
        'Suspeita Avan√ßada': t['suspicious'],
        'Idade dom√≠nio (dias)': t['domain_age_days'],
        'DNS Din√¢mico': t['dynamic_dns'],
        'Emissor SSL': ssl['issuer'],
        'Expira em': ssl['expires'],
        'Cert match': ssl['match'],
        'Redirecionamentos': t['redirect'],
        'Similaridade marca': sim['brand'],
        'Similaridade score': sim['ratio'],
        'Formul√°rio de login': t['content_issues']['login_form'],
        'Solicita√ß√£o sens√≠vel': t['content_issues']['sensitive_request'],
        'Op': op_flag, 'Pt': pt_flag, 'Gsb': gsb_flag,
        'Subdom>2': h['num_sub'] > 2, 'NumSub': h['number_sub'], 'SpecChar': bool(h['specials']),
        'Age<30': t['domain_age_days'] is not None and t['domain_age_days'] < 30,
        'DynDNS': t['dynamic_dns'], 'SSLfails': not ssl['match'], 'Redirect': t['redirect'],
        'HighSim': sim['ratio'] > 0.8, 'Form': t['content_issues']['login_form'], 'Sensitive': t['content_issues']['sensitive_request']
    })


# Exibe hist√≥rico e bot√£o de exporta√ß√£o
if st.session_state.history:
    st.subheader("Hist√≥rico de URLs verificadas")
    df = pd.DataFrame(st.session_state.history)
    st.dataframe(df)
    csv = df.to_csv(index=False).encode('utf-8')
    st.download_button(
        label="Exportar CSV",
        data=csv,
        file_name='history_phishing.csv',
        mime='text/csv'
    )

# Gr√°fico de Pizza de Flags por Categoria para a √∫ltima URL, em bloco escuro
if st.session_state.history:
    last = st.session_state.history[-1]

    known_flags = sum([
        int(last['OpenPhish']), int(last['PhishTank']), int(last['Google Safe Browsing'])
    ])
    basic_flags = sum([
        int(last['Subdom√≠nios'] > 2), int(last['N√∫meros no dom√≠nio']), int(bool(last['Caracteres especiais']))
    ])
    adv_checks = [
        last['Idade dom√≠nio (dias)'] is not None and last['Idade dom√≠nio (dias)'] < 30,
        last['DNS Din√¢mico'], not last['Cert match'], last['Redirecionamentos'],
        last['Similaridade score'] > 0.8, last['Formul√°rio de login'], last['Solicita√ß√£o sens√≠vel'],
    ]
    adv_flags = sum(int(flag) for flag in adv_checks)

    labels = [
        f'Bases Conhecidas ({known_flags})',
        f'Heur√≠stica B√°sica ({basic_flags})',
        f'Heur√≠stica Avan√ßada ({adv_flags})',
    ]
    sizes = [known_flags, basic_flags, adv_flags]
    colors = ['#1ABC9C', '#E67E22', '#8E44AD']

    # bloco escuro centralizado
    st.markdown(
        "<div class='module-block' style='background-color:#303030; text-align:center;'>",
        unsafe_allow_html=True
    )

    fig, ax = plt.subplots(figsize=(6,6), facecolor='#303030')
    fig.patch.set_facecolor('#303030')
    patches, texts, autotexts = ax.pie(
        sizes,
        labels=None,
        autopct='%1.0f',
        startangle=140,
        colors=colors,
        wedgeprops={'edgecolor': 'white', 'linewidth': 1}
    )
    ax.set_title(
        'Distribui√ß√£o de Flags de Phishing por Categoria',
        y=1.2, color='white', pad=5, fontweight='bold'
    )
    ax.axis('equal')  # mant√©m c√≠rculo

    # legenda abaixo
    legend = ax.legend(
        patches, labels,
        title='Categorias', title_fontsize='large',
        loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=3,
        frameon=False, fontsize='medium', labelcolor='white'
    )
    legend.get_title().set_color('white')

    for txt in texts:
        txt.set_visible(False)
    for autotxt in autotexts:
        autotxt.set_color('white')
        autotxt.set_weight('bold')

    plt.tight_layout(rect=[0,0,1,0.85])
    st.pyplot(fig)
    st.markdown("</div>", unsafe_allow_html=True)

# ‚Äî‚Äî‚Äî Gauge de Probabilidade de Phishing ‚Äî‚Äî‚Äî
if st.session_state.history:
    
    last = st.session_state.history[-1]
    # lista de 13 m√©tricas booleanas
    bool_keys = [
        'Op','Pt','Gsb',
        'Subdom>2','NumSub','SpecChar',
        'Age<30','DynDNS','SSLfails',
        'Redirect','HighSim','Form','Sensitive'
    ]
    total = len(bool_keys)
    score = sum(int(last[k]) for k in bool_keys) / total * 100

    fig = go.Figure(go.Indicator(
        mode="gauge+number",
        value=score,
        gauge={
            'axis': {'range': [0, 100]},
            'bar': {'color': 'white'},
            'steps': [
                {'range': [0, 50], 'color': 'green'},
                {'range': [50, 80], 'color': 'yellow'},
                {'range': [80, 100], 'color': 'red'},
            ]
        },
        number={'suffix': "%"}
    ))
    fig.update_layout(
        title={
            'text': "Probabilidade do Site ser Phishing",
            'x': 0.5,
            'xanchor': 'center',
            'yanchor': 'top'
        },
        title_font=dict(size=20),
        margin={'t': 50, 'b': 0, 'l': 0, 'r': 0},
        paper_bgcolor="#303030",
        font={'color': 'white'}
    )

    st.markdown(
        "<div class='module-block' style='background-color:#303030; text-align:center;'>",
        unsafe_allow_html=True
    )
    st.plotly_chart(fig, use_container_width=True)
    st.markdown("</div>", unsafe_allow_html=True)
